




/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

// Para generar las media-queries
// 		$type = max --> para usar con "max-width"
// 		$type = min --> para usar con "min-width"
@mixin respond-to($breakpoint, $type: max) {
	@if map-has-key($breakpoints, $breakpoint) {
		@if	$type == min {
		    @media (min-width: map-get($breakpoints, $breakpoint)) {
				@content;
		    }
		} @else {
		    @media (max-width: map-get($breakpoints, $breakpoint)) {
				@content;
			}
		}
  	}
	@else {
    	@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. " + "Please make sure it is defined in `$breakpoints` map.";
	}
}

// Centrar y dar un ancho máximo igual a $pagemaxwidth
@mixin max-width($max-width : $pagemaxwidth)  {
	margin-left  : auto;
	margin-right : auto;
	width        : 100%;
	max-width    : $max-width;
}

// Degradados
@mixin horizontal_50($startColor : $white, $endColor : $lightergrey) {
	background-color  : $endColor;
	background-image  : linear-gradient(left, $startColor 50%, $endColor 50%);
	background-repeat : repeat-x;
}
@mixin horizontal($startColor : $white, $endColor : $lightergrey) {
	background-color  : $endColor;
	background-image  : linear-gradient(left, $startColor, $endColor);
	background-repeat : repeat-x;
}
@mixin vertical($startColor : $white, $endColor:  $lightergrey) {
	background-color  : $endColor;
	background-image  : linear-gradient(top, $startColor, $endColor);
	background-repeat : repeat-x;
}
@mixin directional($startColor : $white, $endColor : $lightergrey, $deg : 45deg) {
	background-color  : $endColor;
	background-image  : linear-gradient($deg, $startColor, $endColor);
	background-repeat : repeat-x;
}

// Bordes de colores
@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
	border-top    : solid 1px $top-color;
	border-left   : solid 1px $left-color;
	border-right  : solid 1px $right-color;
	border-bottom : solid 1px $bottom-color;
}

// Bordes redondeados
@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
	border-top-right-radius    : $topright;
	border-bottom-right-radius : $bottomright;
	border-bottom-left-radius  : $bottomleft;
	border-top-left-radius     : $topleft;
	background-clip            : padding-box;
}

// Color de fondo con transparencia
@mixin background-alpha($color: $white, $alpha: 1) {
	background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}

// Gradiente de fondo con transparencia
@mixin directional-alpha($startColor : $white, $endColor : $lightergrey, $deg : 45deg, $alpha : .5) {
	background-color  : hsla(hue($endColor), saturation($endColor), lightness($endColor), $alpha);
	background-image  : linear-gradient($deg, hsla(hue($startColor), saturation($startColor), lightness($startColor), $alpha), hsla(hue($endColor), saturation($endColor), lightness($endColor), $alpha));                          // W3C
	background-repeat : repeat-x;
}

// Resize - [none | both | horizontal | vertical | inherit]
@mixin resize($direction: both) {
	resize   : $direction;
	overflow : auto;
}

// Columnas
@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #eee, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
	column-width              : $colwidth;
	column-count              : $colcount;
	column-gap                : $colgap;
	column-rule-color         : $columnRuleColor;
	column-rule-style         : $columnRuleStyle;
	column-rule-width         : $columnRuleWidth;
}


/**
 * Asigna el tamaño de la fuente (en rem) + el lineheight + el margin-bottom --> [vertical rhythm]
 * @param  $size:        $basefontsize   [tamaño de la fuente raíz]
 * @param  $margin:      yes             [si lleva o no margin-bottom]
 * @param  $line-height: $baselineheight [line-height]
 */
@mixin font-size($size: $basefontsize, $margin: yes, $line-height: $baselineheight) {

	// generates the font-size in REMs with a PX fallback
	font-size : 0px + $size;
	font-size : 0rem + $size / $basefontsize;

	// line-height functions
	////////////////////////

	// if you a line-height is specified in the mixin
	@if $line-height != $baselineheight and $line-height != 1 {
		line-height: ceil($size / $line-height) * ($line-height / $size);
	}
	// if $line-height == 1
	// because, typing 1 is quicker than 16
	@else if $line-height == 1 {
		line-height: 1;
	}
	// normal $line-height
	// if the line-height is left.
	@else {
		line-height: ceil($size / $baselineheight) * ($baselineheight / $size);
	}

	// margin-bottom functions
	//////////////////////////

	// if no is bottom margin is required
	@if $margin == no {
		margin-bottom: 0;
	}
	// if a specific bottom margin is required
	@else if $margin != yes and $margin != no {
		margin-bottom: 0px + $margin;
		margin-bottom: 0rem + ($margin / $basefontsize);
	}
	// if you're keeping the vertical rhythm with the margin
	@else {
		margin-bottom: 0px + $baselineheight;
		margin-bottom: 0rem + ($baselineheight / $basefontsize);
	}
}


/**
 * Crea formas de triángulos
 * @param  {string} $dir   [dirección donde apunta]
 * @param  {string} $size  [tamaño]
 * @param  {string} $color [color]
 */
@mixin triangle($dir, $size, $color) {
    border: $size transparent solid;

    @if ($dir == "top" or $dir == "up") {
        border-bottom-color: $color;
    }
    @else if ($dir == "right" or $dir == "after") {
        border-left-color: $color;
    }
    @else if ($dir == "bottom" or $dir == "down") {
        border-top-color: $color;
    }
    @else if ($dir == "left" or $dir == "before") {
        border-right-color: $color;
    }
}


/**
 * Para crear animaciones
 * @param  $name [nombre de la animación]
 */
@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    animation: $animations;
}

@mixin keyframes($animationName) {
    @keyframes #{$animationName} {
        @content;
    }
}




// @alias element
@mixin e($elements...) {
    @each $element in $elements {
		&__#{$element} {
	        @content;
	    }
	}
}

// @alias modifier
@mixin m($modifiers...) {
	@each $modifier in $modifiers {
		&--#{$modifier} {
	        @content;
	    }
	}
}




/*
 * Estilos para los placeholders

   Uso:
	input[type=text] {
 		color: red;
 		@include placeholder {
 			color: blue;
 		}
 	}
 */
@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&:-moz-placeholder           {@content}
	&::-moz-placeholder          {@content}
	&:-ms-input-placeholder      {@content}
}
